// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import

import 'dart:convert';
import 'dart:typed_data';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class Effektio {
  Future<String?> avatarUrl({required Client h, dynamic hint});

  Future<bool> loggedIn({required Client h, dynamic hint});

  Future<String> homeserver({required Client h, dynamic hint});

  /// Returns 0 if things went wrong, or the reference number otherwise
  Future<Client> newClient({required String url, dynamic hint});

  Future<String> echo({required String url, dynamic hint});

  Future<void> init({dynamic hint});
}

class Client {
  final int field0;

  Client({
    required this.field0,
  });
}

class EffektioImpl extends FlutterRustBridgeBase<EffektioWire>
    implements Effektio {
  factory EffektioImpl(ffi.DynamicLibrary dylib) =>
      EffektioImpl.raw(EffektioWire(dylib));

  EffektioImpl.raw(EffektioWire inner) : super(inner);

  Future<String?> avatarUrl({required Client h, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port) =>
            inner.wire_avatar_url(port, _api2wire_box_autoadd_client(h)),
        parseSuccessData: _wire2api_opt_String,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "avatar_url",
          argNames: ["h"],
        ),
        argValues: [h],
        hint: hint,
      ));

  Future<bool> loggedIn({required Client h, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port) =>
            inner.wire_logged_in(port, _api2wire_box_autoadd_client(h)),
        parseSuccessData: _wire2api_bool,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "logged_in",
          argNames: ["h"],
        ),
        argValues: [h],
        hint: hint,
      ));

  Future<String> homeserver({required Client h, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port) =>
            inner.wire_homeserver(port, _api2wire_box_autoadd_client(h)),
        parseSuccessData: _wire2api_String,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "homeserver",
          argNames: ["h"],
        ),
        argValues: [h],
        hint: hint,
      ));

  Future<Client> newClient({required String url, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port) => inner.wire_new_client(port, _api2wire_String(url)),
        parseSuccessData: _wire2api_client,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "new_client",
          argNames: ["url"],
        ),
        argValues: [url],
        hint: hint,
      ));

  Future<String> echo({required String url, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port) => inner.wire_echo(port, _api2wire_String(url)),
        parseSuccessData: _wire2api_String,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "echo",
          argNames: ["url"],
        ),
        argValues: [url],
        hint: hint,
      ));

  Future<void> init({dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port) => inner.wire_init(port),
        parseSuccessData: _wire2api_unit,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "init",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  // Section: api2wire
  ffi.Pointer<wire_uint_8_list> _api2wire_String(String raw) {
    return _api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  ffi.Pointer<wire_Client> _api2wire_box_autoadd_client(Client raw) {
    final ptr = inner.new_box_autoadd_client();
    _api_fill_to_wire_client(raw, ptr.ref);
    return ptr;
  }

  int _api2wire_u32(int raw) {
    return raw;
  }

  int _api2wire_u8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  // Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_client(
      Client apiObj, ffi.Pointer<wire_Client> wireObj) {
    _api_fill_to_wire_client(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_client(Client apiObj, wire_Client wireObj) {
    wireObj.field0 = _api2wire_u32(apiObj.field0);
  }
}

// Section: wire2api
String _wire2api_String(dynamic raw) {
  return raw as String;
}

bool _wire2api_bool(dynamic raw) {
  return raw as bool;
}

Client _wire2api_client(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 1)
    throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
  return Client(
    field0: _wire2api_u32(arr[0]),
  );
}

String? _wire2api_opt_String(dynamic raw) {
  return raw == null ? null : _wire2api_String(raw);
}

int _wire2api_u32(dynamic raw) {
  return raw as int;
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

void _wire2api_unit(dynamic raw) {
  return;
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class EffektioWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  EffektioWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  EffektioWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_avatar_url(
    int port_,
    ffi.Pointer<wire_Client> h,
  ) {
    return _wire_avatar_url(
      port_,
      h,
    );
  }

  late final _wire_avatar_urlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_Client>)>>('wire_avatar_url');
  late final _wire_avatar_url = _wire_avatar_urlPtr
      .asFunction<void Function(int, ffi.Pointer<wire_Client>)>();

  void wire_logged_in(
    int port_,
    ffi.Pointer<wire_Client> h,
  ) {
    return _wire_logged_in(
      port_,
      h,
    );
  }

  late final _wire_logged_inPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_Client>)>>('wire_logged_in');
  late final _wire_logged_in = _wire_logged_inPtr
      .asFunction<void Function(int, ffi.Pointer<wire_Client>)>();

  void wire_homeserver(
    int port_,
    ffi.Pointer<wire_Client> h,
  ) {
    return _wire_homeserver(
      port_,
      h,
    );
  }

  late final _wire_homeserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_Client>)>>('wire_homeserver');
  late final _wire_homeserver = _wire_homeserverPtr
      .asFunction<void Function(int, ffi.Pointer<wire_Client>)>();

  void wire_new_client(
    int port_,
    ffi.Pointer<wire_uint_8_list> url,
  ) {
    return _wire_new_client(
      port_,
      url,
    );
  }

  late final _wire_new_clientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_new_client');
  late final _wire_new_client = _wire_new_clientPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_echo(
    int port_,
    ffi.Pointer<wire_uint_8_list> url,
  ) {
    return _wire_echo(
      port_,
      url,
    );
  }

  late final _wire_echoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_echo');
  late final _wire_echo = _wire_echoPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_init(
    int port_,
  ) {
    return _wire_init(
      port_,
    );
  }

  late final _wire_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_init');
  late final _wire_init = _wire_initPtr.asFunction<void Function(int)>();

  ffi.Pointer<wire_Client> new_box_autoadd_client() {
    return _new_box_autoadd_client();
  }

  late final _new_box_autoadd_clientPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Client> Function()>>(
          'new_box_autoadd_client');
  late final _new_box_autoadd_client = _new_box_autoadd_clientPtr
      .asFunction<ffi.Pointer<wire_Client> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list(
    int len,
  ) {
    return _new_uint_8_list(
      len,
    );
  }

  late final _new_uint_8_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list');
  late final _new_uint_8_list = _new_uint_8_listPtr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    int ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject =
      _store_dart_post_cobjectPtr.asFunction<void Function(int)>();
}

class wire_Client extends ffi.Struct {
  @ffi.Uint32()
  external int field0;
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}
